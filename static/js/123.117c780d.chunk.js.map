{"version":3,"file":"static/js/123.117c780d.chunk.js","mappings":"qNAqDA,UA/CgB,WACd,OAAkCA,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACRL,GAAa,IACbM,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJN,EAAgBM,EAAKC,QACtB,IACAC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EACf,IAAEE,SAAQ,WACTb,GAAa,EACd,GACJ,GAAE,CAACG,KAGF,UAAC,KAAD,YACIJ,GAAaE,EAAaa,OAAS,IACnC,wBACGb,EAAac,KAAI,SAAAC,GAChB,OACE,2BACE,UAAC,KAAD,sBAAuBA,EAAOC,WAC9B,uBAAID,EAAOE,YAFJF,EAAOG,GAKnB,OAKHpB,GAAqC,IAAxBE,EAAaa,SAAiB,oEAC5Cf,IAAc,SAAC,KAAD,WACb,SAAC,KAAD,CACEqB,YAAY,UACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,MACNC,SAAS,QAKlB,C,wJCpDD,IAAMC,EAAa,mCACbC,EAAW,gCAEJC,EAAmB,WAC9B,OAAOC,MAAM,GAAD,OAAIF,EAAJ,sCAA0CD,IAAclB,MAClE,SAAAsB,GACE,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GAEJ,EAEYC,EAAiB,SAAAC,GAC5B,OAAOR,MAAM,GAAD,OACPF,EADO,gCACyBD,EADzB,kBAC6CW,IACvD7B,MAAK,SAAAsB,GACL,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GACF,EAEYG,EAAkB,SAAAlC,GAC7B,OAAOyB,MAAM,GAAD,OAAIF,EAAJ,iBAAqBvB,EAArB,oBAAwCsB,IAAclB,MAChE,SAAAsB,GACE,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GAEJ,EAEYI,EAAe,SAAAnC,GAC1B,OAAOyB,MAAM,GAAD,OACPF,EADO,iBACUvB,EADV,4BACqCsB,IAC/ClB,MAAK,SAAAsB,GACL,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GACF,EACY5B,EAAkB,SAAAH,GAC3B,OAAOyB,MAAM,GAAD,OACPF,EADO,iBACUvB,EADV,4BACqCsB,IAC/ClB,MAAK,SAAAsB,GACL,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GACF,C","sources":["pages/Reviews.js","services/Api.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMovieReviews } from '../services/Api';\nimport { TitleReview, Loader, ContainerFlex } from '../components/styled'\nimport { RotatingLines } from 'react-loader-spinner';\n\nconst Reviews = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [movieReviews, setmovieReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieReviews(movieId)\n      .then(data => {\n        setmovieReviews(data.results);\n      })\n      .catch(error => {\n        console.error(error);\n      }).finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <ContainerFlex>\n      {!isLoading && movieReviews.length > 0 && (\n        <ul>\n          {movieReviews.map(review => {\n            return (\n              <li key={review.id}>\n                <TitleReview >Author: {review.author}</TitleReview >\n                <p>{review.content}</p>\n              </li>\n            )\n          }\n          )\n          }\n        </ul>\n      )}\n      {!isLoading && movieReviews.length === 0 && (<p>We don`t have any reviews for this movie</p>)}\n      {isLoading && (<Loader>\n        <RotatingLines\n          strokeColor=\"#3f51b5\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"150\"\n          visible={true}\n        />\n      </Loader>)}\n    </ContainerFlex>\n  );\n};\nexport default Reviews;\n","const MY_API_KEY = 'ceffe16ccd7d46ce9932d25cc21ec8d8';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovie = () => {\n  return fetch(`${BASE_URL}trending/movie/day?api_key=${MY_API_KEY}`).then(\n    response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Not found'));\n    }\n  );\n};\n\nexport const getSearchMovie = query => {\n  return fetch(\n    `${BASE_URL}search/movie?api_key=${MY_API_KEY}&query=${query}`\n  ).then(response => {\n    return response.ok\n      ? response.json()\n      : Promise.reject(new Error('Not found'));\n  });\n};\n\nexport const getMovieDetails = movieId => {\n  return fetch(`${BASE_URL}movie/${movieId}?api_key=${MY_API_KEY}`).then(\n    response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Not found'));\n    }\n  );\n};\n\nexport const getMovieCast = movieId => {\n  return fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${MY_API_KEY}`\n  ).then(response => {\n    return response.ok\n      ? response.json()\n      : Promise.reject(new Error('Not found'));\n  });\n};\nexport const getMovieReviews = movieId => {\n    return fetch(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${MY_API_KEY}`\n    ).then(response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Not found'));\n    });\n  };\n  \n"],"names":["useState","isLoading","setIsLoading","movieReviews","setmovieReviews","movieId","useParams","useEffect","getMovieReviews","then","data","results","catch","error","console","finally","length","map","review","author","content","id","strokeColor","strokeWidth","animationDuration","width","visible","MY_API_KEY","BASE_URL","getTrendingMovie","fetch","response","ok","json","Promise","reject","Error","getSearchMovie","query","getMovieDetails","getMovieCast"],"sourceRoot":""}