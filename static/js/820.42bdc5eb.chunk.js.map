{"version":3,"file":"static/js/820.42bdc5eb.chunk.js","mappings":"yNA8DA,UAzDgB,WAAO,IAAD,EACpB,GAAwCA,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BC,EAAAA,EAAAA,UAAQ,UAACF,EAAaG,IAAI,gBAAlB,QAA8B,IAAhE,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACM,KAAVN,IAGJO,EAAAA,EAAAA,IAAeP,GACZQ,MAAK,SAAAC,GACJN,EAASM,EAAKC,SAEc,IAAxBD,EAAKC,QAAQC,QACfC,IAAAA,OAAAA,QACE,2EAGL,IACAC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EACf,GACJ,GAAE,CAACd,IAeJ,OACE,4BACE,kBAAMgB,SAfO,SAAAC,GACfA,EAAEC,iBACFjB,EAASgB,EAAEE,OAAOC,SAASC,KAAKC,MAAMC,QACtC1B,EAC0C,KAAxCoB,EAAEE,OAAOC,SAASC,KAAKC,MAAMC,OACzB,CAAEvB,MAAOiB,EAAEE,OAAOC,SAASC,KAAKC,MAAMC,QACtC,CAAC,GAEoC,KAAxCN,EAAEE,OAAOC,SAASC,KAAKC,MAAMC,QAC9BX,IAAAA,OAAAA,QAAwB,iBAE1BK,EAAEE,OAAOK,OACV,EAGG,WACE,kBAAOC,KAAK,OAAOC,KAAK,UACxB,mBAAQD,KAAK,SAAb,2BAEF,wBACGvB,EAAMS,OAAS,GACdT,EAAMyB,KAAI,SAAAC,GAAI,OACZ,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAM5B,GAA/C,SACGwB,EAAKK,SAFDL,EAAKE,GADF,QAUvB,C","sources":["pages/Movies/Movies.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation, Link } from 'react-router-dom';\nimport { getSearchMovie } from '../../components/Api';\nimport Notiflix from 'notiflix';\n\n const Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('query') ?? '');\n  const [films, setFilms] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    getSearchMovie(query)\n      .then(data => {\n        setFilms(data.results);\n\n        if (data.results.length === 0) {\n          Notiflix.Notify.failure(\n            'Sorry, there are no movies matching your search query. Please try again.'\n          );\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [query]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setQuery(e.target.elements.text.value.trim());\n    setSearchParams(\n      e.target.elements.text.value.trim() !== ''\n        ? { query: e.target.elements.text.value.trim() }\n        : {}\n    );\n    if(e.target.elements.text.value.trim() === ''){\n      Notiflix.Notify.failure(\"Enter a query\");\n    }\n    e.target.reset();\n  };\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" name=\"text\"></input>\n        <button type=\"submit\">find film</button>\n      </form>\n      <ul>\n        {films.length > 0 &&\n          films.map(film => (\n            <li key={film.id}>\n              <Link to={`/movies/${film.id}`} state={{ from: location }}>\n                {film.title}\n              </Link>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\nexport default Movies"],"names":["useSearchParams","searchParams","setSearchParams","useState","get","query","setQuery","films","setFilms","location","useLocation","useEffect","getSearchMovie","then","data","results","length","Notiflix","catch","error","console","onSubmit","e","preventDefault","target","elements","text","value","trim","reset","type","name","map","film","to","id","state","from","title"],"sourceRoot":""}