{"version":3,"file":"static/js/764.da0111e5.chunk.js","mappings":"uOAyEA,UAnEe,WAAO,IAAD,EACnB,GAAwCA,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BC,EAAAA,EAAAA,UAAQ,UAACF,EAAaG,IAAI,gBAAlB,QAA8B,IAAhE,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACM,KAAVN,IAGJO,EAAAA,EAAAA,IAAeP,GACZQ,MAAK,SAAAC,GACJN,EAASM,EAAKC,SAEc,IAAxBD,EAAKC,QAAQC,QACfC,IAAAA,OAAAA,QACE,2EAGL,IACAC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EACf,GACJ,GAAE,CAACd,IAiBJ,OACE,UAAC,KAAD,YACE,UAAC,KAAD,CAAMgB,SAjBO,SAAAC,GACfA,EAAEC,iBACFjB,EAASgB,EAAEE,OAAOC,SAASC,KAAKC,MAAMC,QACtC1B,EAC0C,KAAxCoB,EAAEE,OAAOC,SAASC,KAAKC,MAAMC,OACzB,CAAEvB,MAAOiB,EAAEE,OAAOC,SAASC,KAAKC,MAAMC,QACtC,CAAC,GAEqC,KAAxCN,EAAEE,OAAOC,SAASC,KAAKC,MAAMC,QAC/BX,IAAAA,OAAAA,QAAwB,iBAE1BK,EAAEE,OAAOK,OACV,EAKG,WACE,SAAC,KAAD,CAAiBC,KAAK,OAAOC,KAAK,UAClC,SAAC,KAAD,CAAQD,KAAK,eAEf,SAAC,EAAAE,GAAD,UACGzB,EAAMS,OAAS,GACdT,EAAM0B,KAAI,SAAAC,GAAI,OACZ,SAAC,EAAAC,GAAD,WACE,UAAC,KAAD,CAAMC,GAAE,kBAAaF,EAAKG,IAAMC,MAAO,CAAEC,KAAM9B,GAA/C,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CACE+B,IAAG,yCAAoCN,EAAKO,aAC5CC,IAAKR,EAAKS,WAGd,SAAC,KAAD,WACE,SAAC,KAAD,UAAQT,EAAKS,cATVT,EAAKG,GADF,QAkBvB,C,wJCxED,IAAMO,EAAa,mCACbC,EAAW,gCAEJC,EAAmB,WAC9B,OAAOC,MAAM,GAAD,OAAIF,EAAJ,sCAA0CD,IAAc/B,MAClE,SAAAmC,GACE,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GAEJ,EAEYzC,EAAiB,SAAAP,GAC5B,OAAO0C,MAAM,GAAD,OACPF,EADO,gCACyBD,EADzB,kBAC6CvC,IACvDQ,MAAK,SAAAmC,GACL,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GACF,EAEYC,EAAkB,SAAAC,GAC7B,OAAOR,MAAM,GAAD,OAAIF,EAAJ,iBAAqBU,EAArB,oBAAwCX,IAAc/B,MAChE,SAAAmC,GACE,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GAEJ,EAEYG,EAAe,SAAAD,GAC1B,OAAOR,MAAM,GAAD,OACPF,EADO,iBACUU,EADV,4BACqCX,IAC/C/B,MAAK,SAAAmC,GACL,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GACF,EACYI,EAAkB,SAAAF,GAC3B,OAAOR,MAAM,GAAD,OACPF,EADO,iBACUU,EADV,4BACqCX,IAC/C/B,MAAK,SAAAmC,GACL,OAAOA,EAASC,GACZD,EAASE,OACTC,QAAQC,OAAO,IAAIC,MAAM,aAC9B,GACF,C","sources":["pages/Movies.js","services/Api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation, Link } from 'react-router-dom';\nimport { getSearchMovie } from '../services/Api';\nimport Notiflix from 'notiflix';\nimport { SearchFormInput, Button, Form, MovieContainer, Ul, Li, Title, ContainerImg, ContainerTitle, Img } from '../components/styled'\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('query') ?? '');\n  const [films, setFilms] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    getSearchMovie(query)\n      .then(data => {\n        setFilms(data.results);\n\n        if (data.results.length === 0) {\n          Notiflix.Notify.failure(\n            'Sorry, there are no movies matching your search query. Please try again.'\n          );\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [query]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setQuery(e.target.elements.text.value.trim());\n    setSearchParams(\n      e.target.elements.text.value.trim() !== ''\n        ? { query: e.target.elements.text.value.trim() }\n        : {}\n    );\n    if (e.target.elements.text.value.trim() === '') {\n      Notiflix.Notify.failure('Enter a query');\n    }\n    e.target.reset();\n  };\n\n\n  return (\n    <MovieContainer>\n      <Form onSubmit={onSubmit}>\n        <SearchFormInput type=\"text\" name=\"text\"></SearchFormInput>\n        <Button type=\"submit\"></Button>\n      </Form>\n      <Ul>\n        {films.length > 0 &&\n          films.map(film => (\n            <Li key={film.id}>\n              <Link to={`/movies/${film.id}`} state={{ from: location }}>\n                <ContainerImg>\n                  <Img\n                    src={`https://image.tmdb.org/t/p/w500${film.poster_path}`}\n                    alt={film.title}\n                  />\n                </ContainerImg>\n                <ContainerTitle>\n                  <Title>{film.title}</Title>\n                </ContainerTitle>\n              </Link>\n            </Li>\n          ))}\n      </Ul>\n    </MovieContainer>\n  );\n};\nexport default Movies;\n","const MY_API_KEY = 'ceffe16ccd7d46ce9932d25cc21ec8d8';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovie = () => {\n  return fetch(`${BASE_URL}trending/movie/day?api_key=${MY_API_KEY}`).then(\n    response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Not found'));\n    }\n  );\n};\n\nexport const getSearchMovie = query => {\n  return fetch(\n    `${BASE_URL}search/movie?api_key=${MY_API_KEY}&query=${query}`\n  ).then(response => {\n    return response.ok\n      ? response.json()\n      : Promise.reject(new Error('Not found'));\n  });\n};\n\nexport const getMovieDetails = movieId => {\n  return fetch(`${BASE_URL}movie/${movieId}?api_key=${MY_API_KEY}`).then(\n    response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Not found'));\n    }\n  );\n};\n\nexport const getMovieCast = movieId => {\n  return fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${MY_API_KEY}`\n  ).then(response => {\n    return response.ok\n      ? response.json()\n      : Promise.reject(new Error('Not found'));\n  });\n};\nexport const getMovieReviews = movieId => {\n    return fetch(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${MY_API_KEY}`\n    ).then(response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Not found'));\n    });\n  };\n  \n"],"names":["useSearchParams","searchParams","setSearchParams","useState","get","query","setQuery","films","setFilms","location","useLocation","useEffect","getSearchMovie","then","data","results","length","Notiflix","catch","error","console","onSubmit","e","preventDefault","target","elements","text","value","trim","reset","type","name","Ul","map","film","Li","to","id","state","from","src","poster_path","alt","title","MY_API_KEY","BASE_URL","getTrendingMovie","fetch","response","ok","json","Promise","reject","Error","getMovieDetails","movieId","getMovieCast","getMovieReviews"],"sourceRoot":""}