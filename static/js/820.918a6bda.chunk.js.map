{"version":3,"file":"static/js/820.918a6bda.chunk.js","mappings":"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","sources":["components/Api.js","pages/Movies/Movies.js"],"sourcesContent":["const MY_API_KEY = 'ceffe16ccd7d46ce9932d25cc21ec8d8';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovie = () => {\n  return fetch(`${BASE_URL}trending/movie/day?api_key=${MY_API_KEY}`).then(\n    response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Not found'));\n    }\n  );\n};\n\nexport const getSearchMovie = query => {\n  return fetch(\n    `${BASE_URL}search/movie?api_key=${MY_API_KEY}&query=${query}`\n  ).then(response => {\n    return response.ok\n      ? response.json()\n      : Promise.reject(new Error('Not found'));\n  });\n};\n\nexport const getMovieDetails = movieId => {\n  return fetch(`${BASE_URL}movie/${movieId}?api_key=${MY_API_KEY}`).then(\n    response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Not found'));\n    }\n  );\n};\n\nexport const getMovieCast = movieId => {\n  return fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${MY_API_KEY}`\n  ).then(response => {\n    return response.ok\n      ? response.json()\n      : Promise.reject(new Error('Not found'));\n  });\n};\nexport const getMovieReviews = movieId => {\n    return fetch(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${MY_API_KEY}`\n    ).then(response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Not found'));\n    });\n  };\n  \n","import { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation, Link } from 'react-router-dom';\nimport { getSearchMovie } from '../../components/Api';\nimport Notiflix from 'notiflix';\nimport styled from 'styled-components';\nconst SearchFormInput = styled.input`\ndisplay: inline-block;\nwidth: 100%;\nheight: 42px;\nfont: inherit;\nfont-size: 20px;\nborder: none;\noutline: none;\npadding-left: 4px;\npadding-right: 4px;\nborder-radius: 4px;\npadding-top: 0;\npadding-bottom: 0;\nbox-shadow: inset 1px 1px 3px -1px rgba(0, 0, 0, 0.6);\n`;\nconst Button = styled.button`\nposition: absolute;\ntop: 0;\nright: 0px;\nwidth: 42px;\nheight: 42px;\nborder: none;\nbackground-color: #87cefa;\nborder-radius: 0 5px 5px 0;\ncursor: pointer;\n:before {\n  content: '\\f002';\n  font-family: FontAwesome;\n  font-size: 16px;\n  color: white\n}\n`;\nconst Form = styled.form`\nposition: relative;\nwidth: 100vw;\ndisplay: flex;\nalign-items: center;\nmax-width: 400px;\nbackground-color: #fff;\nborder-radius: 3px;\noverflow: hidden;\nmargin-left: auto;\nmargin-right: auto;\nmargin-bottom: 30px;\n`;\n\nconst MovieContainer = styled.div`\nwidth: 100vw;\nheight: 100vh;\n`;\nconst Ul = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: space-evenly;\nmargin-left: auto;\nmargin-right: auto;\nmargin: -35px;\npadding: 0;\n`;\nconst Li = styled.li`\nwidth: 300px;\nheight: 525px;\nmargin: 35px;\nborder: 1px solid black;\nborder-radius: 5px;\nbackground-color: white;\nfont-weight: 600;\nfont-size: 16px;\nline-height: 1.2;\nbox-shadow: 14px 14px 28px rgba(0, 0, 0, 0.25),\n  0 10px 10px rgba(0, 0, 0, 0.22);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),  box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n:hover {\n  box-shadow: 14px 25px 40px rgba(0, 0, 0, 0.25),\n    0 10px 10px rgba(0, 0, 0, 0.22);\n  transform: scale(1.1);\n}\n`;\nconst ContainerImg = styled.div`\nheight: 450px;\n`;\nconst ContainerTitle = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nheight: 75px;\n`;\nconst Title = styled.p`\ntext-align: center;\nline-height: 1.3;\nfont-size: 20px;\n`;\nconst Img = styled.img`\nwidth: 100%;\nheight: 100%;\ndisplay: block;\nmargin-bottom: 5px;\nobject-fit: cover;\n`;\n\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('query') ?? '');\n  const [films, setFilms] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    getSearchMovie(query)\n      .then(data => {\n        setFilms(data.results);\n\n        if (data.results.length === 0) {\n          Notiflix.Notify.failure(\n            'Sorry, there are no movies matching your search query. Please try again.'\n          );\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [query]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setQuery(e.target.elements.text.value.trim());\n    setSearchParams(\n      e.target.elements.text.value.trim() !== ''\n        ? { query: e.target.elements.text.value.trim() }\n        : {}\n    );\n    if (e.target.elements.text.value.trim() === '') {\n      Notiflix.Notify.failure('Enter a query');\n    }\n    e.target.reset();\n  };\n\n \n  return (\n    <MovieContainer>\n      <Form onSubmit={onSubmit}>\n        <SearchFormInput type=\"text\" name=\"text\"></SearchFormInput>\n        <Button type=\"submit\"></Button>\n      </Form>\n      <Ul>\n        {films.length > 0 &&\n          films.map(film => (\n            <Li key={film.id}>\n              <Link to={`/movies/${film.id}`} state={{ from: location }}>\n                <ContainerImg>\n                  <Img\n                    src={`https://image.tmdb.org/t/p/w500${film.poster_path}`}\n                    alt={film.title}\n                  />\n                </ContainerImg>\n                <ContainerTitle>\n                  <Title>{film.title}</Title>\n                </ContainerTitle>\n              </Link>\n            </Li>\n          ))}\n      </Ul>\n    </MovieContainer>\n  );\n};\nexport default Movies;\n"],"names":["MY_API_KEY","BASE_URL","getTrendingMovie","fetch","then","response","ok","json","Promise","reject","Error","getSearchMovie","query","getMovieDetails","movieId","getMovieCast","getMovieReviews","SearchFormInput","styled","Button","Form","MovieContainer","Ul","Li","ContainerImg","ContainerTitle","Title","Img","useSearchParams","searchParams","setSearchParams","useState","get","setQuery","films","setFilms","location","useLocation","useEffect","data","results","length","Notiflix","catch","error","console","onSubmit","e","preventDefault","target","elements","text","value","trim","reset","type","name","map","film","to","id","state","from","src","poster_path","alt","title"],"sourceRoot":""}